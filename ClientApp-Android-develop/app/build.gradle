apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    signingConfigs {
        staging {
            Properties props = new Properties()
            def propFile = new File('signing.properties')
            props.load(new FileInputStream(propFile))

                android.signingConfigs.staging.storeFile = file(props['STAGING_STORE_FILE'])
                android.signingConfigs.staging.storePassword = props['STAGING_STORE_PASSWORD']
                android.signingConfigs.staging.keyAlias = props['STAGING_KEY_ALIAS']
                android.signingConfigs.staging.keyPassword = props['STAGING_KEY_PASSWORD']
            }
    }
    defaultConfig {

        applicationId "com.welysn.lysnclient"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 15
        versionName "1.1.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField "String", "BASE_URL", '"https://demo.welysn.com/v1/api/"'
            buildConfigField "String", "MIX_PANEL_TOKEN", '"af004ccd6067262f582c0b7e3ab1a20b"'
            buildConfigField "String", "COUNTRY_CODE", '"+91 "'
            buildConfigField "String", "WEB_VIEW_BASE_URL", '"https://demo.welysn.com"'
        }
        staging {
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", '"https://staging.welysn.com/v1/api/"'
            buildConfigField "String", "MIX_PANEL_TOKEN", '"e8f0538dcce11bd8cd88e11ef87cc928"'
            buildConfigField "String", "COUNTRY_CODE", '"+91 "'
            buildConfigField "String", "WEB_VIEW_BASE_URL", '"https://staging.welysn.com"'
            signingConfig signingConfigs.staging
            minifyEnabled true
        }
        release {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", '"https://welysn.com/v1/api/"'
            buildConfigField "String", "MIX_PANEL_TOKEN", '"0ea0f7982992e6e938a93f8c4e298af0"'
            buildConfigField "String", "COUNTRY_CODE", '"+61 "'
            buildConfigField "String", "WEB_VIEW_BASE_URL", '"https://welysn.com"'
            signingConfig signingConfigs.staging
        }
    }
    testOptions {
//        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13'
    testImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // UI
    implementation "androidx.appcompat:appcompat:$appcompact_version"
    //noinspection GradleDependency
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.recyclerview:recyclerview:$recycler_view_version"
    implementation "androidx.cardview:cardview:$card_view_version"

    // Glide dependency
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // LOGGER
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$gson_converter"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttP_mock_server_version"

//    implementation 'com.google.code.gson:gson:2.8.5'

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version" // ViewModel
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version" // LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // lib for SMS verification (Phone Auth)
    implementation "com.google.android.gms:play-services-auth:$play_services_auth"
    implementation "com.google.android.gms:play-services-auth-api-phone:$play_service_auth_api_phone"

    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // Koin dependency injection
    //noinspection GradleDependency
    implementation "org.koin:koin-android:$koin_version"
    //noinspection GradleDependency
    implementation "org.koin:koin-android-viewmodel:$koin_version"
    implementation "org.koin:koin-android-architecture:$koin_arch_version"

    // Unit Testing
    //noinspection GradleDependency
    testImplementation "org.koin:koin-core:$koin_version"
    //noinspection GradleDependency
    testImplementation "org.koin:koin-test:$koin_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$nhaarman_mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    testImplementation "androidx.test:core-ktx:$test_core_ktx_version"
    testImplementation "com.jraska.livedata:testing-ktx:$jraska_livedata_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "io.mockk:mockk:$mockk_version"

    // Mix panel
    implementation "com.mixpanel.android:mixpanel-android:$mix_panel_version"
    implementation 'kr.co.prnd:stepprogressbar:1.0.0-alpha1'

}

jacoco {
    toolVersion = '0.8.4'
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }
// UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Module_*Factory.*',
            '**/*Module*.*',
            '**/*Module*.*',
            '**/*Fragment*.*',
            '**/*Activity*.*',
            '**/*Adapter*.*',
            '**/*ViewPager*.*',
            '**/*ViewHolder*.*',
            '**/*Dialog*.*',
            '**/*Module*.*',
            '**/*Koin*.*',
            '**/*AppSignatureUtil*.*',
            '**/*CustomWebViewClient*.*'
    ]

    classDirectories.from = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    // sources
    sourceDirectories.from = files([
            android.sourceSets.main.java.srcDirs,
            "$project.projectDir/src/main/java"
    ])
    executionData.from = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec'])

}



